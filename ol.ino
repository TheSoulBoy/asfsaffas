/*
 * DISPLAYER
 */

#include <Adafruit_GFX.h> 
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <Wire.h>
#include <DallasTemperature.h>
#include <QMC5883.h>
#include <WireData.h>

#define ONE_WIRE_BUS 2
#define GRAPH_LENGHT 127

const int slaveAddress = 0x08;
    
OneWire oneWire (ONE_WIRE_BUS);
Adafruit_SSD1306 display;
float Temp;
int deg;

uint_least8_t graphY[GRAPH_LENGHT + 1]{ 0 };

static const unsigned char PROGMEM yeti[] =
{ 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xFF, 0xFE, 0x00, 0x00, 0x01, 0x80, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x07,
	0xFF, 0xFE, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xE0, 0x00, 0x07,
	0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFE, 0x00, 0x07, 0xFF, 0xFE, 0x07,
	0xFF, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xC7,
	0xFF, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xE7,
	0xFF, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xE1, 0xE7,
	0xFF, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xE1, 0xE7, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 0x7F, 0xE0, 0xF7,
	0xFF, 0xFF, 0xFF, 0x00, 0x3E, 0x3F, 0xE0, 0xF7, 0xFF, 0xFF, 0xFF, 0x00, 0x3E, 0x1F, 0xF1, 0xF7,
	0xFF, 0xFF, 0xFF, 0x80, 0x3C, 0x1F, 0xF1, 0x77, 0xFF, 0xFF, 0xFF, 0x80, 0x3C, 0x3F, 0xF0, 0x77,
	0xFF, 0xFF, 0xFF, 0xFC, 0x3E, 0x7F, 0xF0, 0x77, 0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0xFF, 0xFF, 0x77,
	0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0xFF, 0xFF, 0x37, 0xFF, 0xFF, 0xFF, 0xFE, 0x38, 0xFE, 0xFF, 0x87,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x78, 0x3F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x7C, 0x07, 0xE7,
	0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x3E, 0x01, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x3E, 0x01, 0xC7,
	0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x7E, 0x1F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0F, 0x87,
	0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0x37, 0x19, 0x9B, 0x10, 0x63, 0x8E, 0xFB,
	0xCB, 0x36, 0xED, 0x9A, 0x5D, 0xDD, 0xB6, 0x73, 0xCF, 0x14, 0xE5, 0x9A, 0x7D, 0xDD, 0xB6, 0x73,
	0xE3, 0x54, 0xE5, 0x13, 0x1D, 0x9C, 0x8E, 0xAB, 0xFB, 0x44, 0xE4, 0x47, 0xDD, 0xDD, 0xAE, 0xAB,
	0xDB, 0x66, 0xEE, 0x66, 0xDD, 0xDD, 0xB6, 0xDB, 0xC3, 0x77, 0x1E, 0xEE, 0x1D, 0xE3, 0xB6, 0xDB,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


void setup()
{                
	Serial.begin(9600);
	Wire.begin();
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

	delay(100);
	display.clearDisplay();
	display.setTextColor(WHITE);
	display.drawBitmap(0, 0, yeti, 64, 60, WHITE);
	display.display();

	for (int xval = 0; xval <= 124; xval++)
	{
		int y = 63; 
		display.drawPixel(xval, y, WHITE);
		display.drawPixel(xval, y - 1, WHITE);
		display.display();
		delay(1); 
	}
}


void loop()  
{
	float data;
	int a;

	Wire.requestFrom(slaveAddress, sizeof(data) + sizeof(int));
	wireReadData(a);
	wireReadData(data);

	display.clearDisplay();

	display.setCursor(0,0);
	display.setTextSize(3);
	display.print(data);

	GraphUpdate((uint_least8_t) a);
	GraphDraw();

	display.display();
}


void GraphUpdate(int yPos)
{
	for (int i = 0; i < GRAPH_LENGHT; i++)
	{
		graphY[i] = graphY[i + 1];
	}
	graphY[GRAPH_LENGHT] = yPos;
}


void GraphDraw()
{
	for (int i = 0; i < GRAPH_LENGHT + 1; i++)
	{
		display.drawPixel(i, 
				64 - (int16_t)graphY[i] * 32 / 360, 
				WHITE);
	}
}
